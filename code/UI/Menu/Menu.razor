@inherits NavHostPanel

<root class=@(IsOpen ? "open" : "closed")>
    <div class="header">
        <div class="header-logo"></div>
        <div class="header-navigation">

            <navlink href="/menu/stats">
                <label>Map</label>
                <div class="stroke"></div>
            </navlink>

            <navlink href="/menu/achievements">
                <label>Achievements</label>
                <div class="stroke"></div>
            </navlink>

            <navlink href="/menu/trailpass">
                <label>Trail Pass</label>
                <div class="stroke"></div>
            </navlink>

            <navlink href="/menu/customize">
                <label>Customize</label>
                <div class="stroke"></div>
            </navlink>

            <navlink href="/menu/controls">
                <label>Controls</label>
                <div class="stroke"></div>
            </navlink>
        </div>

        <div class="header-right">
            <navlink href="/menu/settings" class="hidden">
                <label>Settings</label>
                <div class="stroke"></div>
            </navlink>

            <navlink class="stop-spectating" icon="cancel" onclick="StopSpectating()">
                <label>Stop Spectating</label>
                <div class="stroke"></div>
            </navlink>

            <navlink @onclick=@Close class="nav-link">
                <label>X</label>
                <div class="stroke"></div>
            </navlink>
        </div>
    </div>
    <div class="body">
        <div class="navigator-canvas" slot="navigator-canvas"></div>
    </div>
</root>

@code {
    private bool IsOpen;

    public Menu()
    {
        DefaultUrl = "/menu/stats";
    }

    public override void Tick()
    {
        base.Tick();

        if (Game.LocalPawn is not UnicyclePlayer pl) return;

        SetClass("is-spectating", pl.SpectateTarget != null);
    }

    public void Close()
    {
        IsOpen = false;
        StateHasChanged();
    }

    public void StopSpectating()
    {
        UnicyclePlayer.ServerCmd_SetSpectateTarget(-1);
        Close();
    }

    [Event.Client.BuildInput]
    private void OnBuildInput() 
    {
        if (!InputExtra.Pressed(InputActions.Menu))
            return;

        IsOpen = !IsOpen;

        StateHasChanged();
    }
}
