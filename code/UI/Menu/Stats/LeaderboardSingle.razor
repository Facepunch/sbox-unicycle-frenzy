
@inherits Panel;

<root>
    <div class="scoreboard-container">
        <label text="Loading..." class="loading-note" />
        <div class="leaderboard-canvas">
			@foreach(var entry in Entries)
			{
				<LeaderboardSingleEntry Rank=@entry.Rank Name=@entry.Name Score=@entry.Score PlayerId=@entry.Playerid />
			}
        </div>

        <div class="leaderboard-sorting">
             <div class="button-row">
                <button class="button is-primary is-large" onclick="Rebuild()">
                    <div class="button-bg"></div>
                    <label>Top Times</label>
                </button>
                <button class="button is-secondary is-large" onclick="Rebuild()">
                    <div class="button-bg"></div>
                    <label>My Time</label>
                </button>
             </div>
        </div>
    </div>
</root>

@code {

    record struct LeaderboardEntry( int Rank, string Name, float Score, long Playerid );

    public string Scope { get; set; }

    private List<LeaderboardEntry> Entries = new();

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        Rebuild();
    }

    protected override int BuildHash()
    {
        if (Scope != "session") return 0;

        var newhash = 1;

        foreach(var ent in Entity.All)
        {
            if (ent is not UnicyclePlayer pl) continue;

            newhash = HashCode.Combine(newhash, pl.BestTime);
        }

        return newhash;
    }

    public async void Rebuild()
    {
        Entries.Clear();

        SetClass("loading", true);

        switch (Scope)
        {
            case "global":
            case "friends":
                var scores = await LeaderboardHelper.FetchScores();

                Entries.Clear();

                if (Scope == "friends")
                {
                    scores = scores
                        .Where(x => x.PlayerId == Local.PlayerId || new Friend(x.PlayerId).IsFriend)
                        .ToList();
                }

                foreach (var entry in scores)
                {
                    var time = entry.Score / 1000f;
                    var rank = entry.GlobalRank;
                    var name = entry.Name;
                    var playerId = entry.PlayerId;

                    Entries.Add(new ( rank, name, time, playerId ));
                }
                break;
            case "session":
                var players = Player.All.OfType<UnicyclePlayer>()
                    .Where(x => x.IsValid() && x.Client.IsValid())
                    .OrderBy(x => x.BestTime);

                var srank = 0;
                foreach (var pl in players)
                {
                    var time = pl.CourseIncomplete ? 0f : pl.BestTime;

                    Entries.Add(new(++srank, pl.Client.Name, time, pl.Client.SteamId));
                }
                break;
        }

        SetClass("loading", false);

        StateHasChanged();
    }
}
