@inherits Panel
@page "/customize";

<root>
	<div class="sidebar">
		<div class="navbar">
			<a class="button" href="/home">Return</a>
		</div>
	</div>
	<div class="right-side">
	</div>
	<div class="clothingpage-container">
		<div class="clothing-container">
			<CustomizePageItem SelectedCategory="@ItemCategories.Frame" Items="@Items" ></CustomizePageItem>
			<CustomizePageItem SelectedCategory="@ItemCategories.Wheel" Items="@Items" ></CustomizePageItem>
			<CustomizePageItem SelectedCategory="@ItemCategories.Pedal" Items="@Items" ></CustomizePageItem>
			<CustomizePageItem SelectedCategory="@ItemCategories.Seat" Items="@Items" ></CustomizePageItem>
		</div>
	</div>
	<div class="input-rot">
		<div class="input-rot-container">
			<div class="input-rot-item">autorenew</div>
			<InputHint Size=@InputGlyphSize.Medium @Action="lean_left" />
			<InputHint Size=@InputGlyphSize.Medium @Action="left_pedal" />
			<InputHint Size=@InputGlyphSize.Medium @Action="lean_right" />
			<div class="input-rot-item">sync</div>

		</div>
	</div>
</root>


@code {
	public static UnicycleDressed Local;
	List<UnicycleFrenzyItems> Items = new List<UnicycleFrenzyItems>();
	UnicycleProgression Progression { get; set; }
	UFItemProgression ProgressionResource { get; set; }

	public CustomizePage()
	{

	}

	GameObject unicycle;
	Rotation TargetRotation;
	public override void Tick()
	{
		base.Tick();

		if(unicycle == null)
		{
			unicycle = Scene.GetAllComponents<UnicycleDresser>().FirstOrDefault().GameObject;
		}

		if (unicycle != null)
		{

			if (Input.Down("left_pedal"))
			{
				var moveDelta = Mouse.Delta;
				TargetRotation = unicycle.Transform.Rotation *  Rotation.FromYaw(moveDelta.x);
			}
			if(Input.Down("lean_left"))
			{
				TargetRotation = unicycle.Transform.Rotation * Rotation.FromYaw(-10);
			}
			if (Input.Down("lean_right"))
			{
				TargetRotation = unicycle.Transform.Rotation * Rotation.FromYaw(10);
			}

			unicycle.Transform.Rotation = Rotation.Lerp(unicycle.Transform.Rotation, TargetRotation, Time.Delta * 10);

		}
	}

	protected override void OnAfterTreeRender(bool firstTime)
	{
		base.OnAfterTreeRender(firstTime);

		if (!firstTime) return;

		Fetch();

		ProgressionResource = ResourceLibrary.GetAll<UFItemProgression>().Where(x => x.IsCurrentPass).FirstOrDefault();
		Items = Progression.UnlockedItems;

	}

	void Fetch()
	{
		Progression = DataHelper.ReadJson<UnicycleProgression>("unicycle.progression.json");
		if (Progression == null)
		{
			Progression = new UnicycleProgression();
		}
	}

	void Save()
	{
		if (Progression == null)
		{
			Fetch();
		}
		DataHelper.WriteJson("unicycle.progression.json", Progression);
	}
}
